---
import { ctaConfig } from "../config/cta";
import { imageAssets } from "../config/assets";

interface Props {
  title?: string;
  subtitle?: string;
  ctaText?: string;
  ctaLink?: string;
  secondaryText?: string;
  secondaryLink?: string;
  trustedBy?: string;
}

const {
  title = ctaConfig.title,
  subtitle = ctaConfig.description,
  ctaText = ctaConfig.primaryAction.text,
  ctaLink = ctaConfig.primaryAction.href,
  secondaryText = ctaConfig.secondaryAction?.text || "Learn More",
  secondaryLink = ctaConfig.secondaryAction?.href || "/services",
  trustedBy = ctaConfig.trustedBy || "Trusted by leading companies worldwide",
} = Astro.props;
---

<section class="section-padding relative overflow-hidden">
  <!-- Background elements for visual interest -->
  <div
    class="absolute inset-0 bg-gradient-to-br"
    style="background: linear-gradient(to bottom right, var(--color-primary), var(--color-secondary-dark))"
  >
  </div>
  <div class="bg-grid absolute inset-0 opacity-20"></div>
  <div
    class="animate-blob absolute -top-64 -right-64 h-96 w-96 rounded-full opacity-30 mix-blend-multiply blur-3xl filter"
    style="background-color: var(--color-secondary)"
  >
  </div>
  <div
    class="animate-blob animation-delay-2000 absolute -bottom-64 -left-64 h-96 w-96 rounded-full opacity-30 mix-blend-multiply blur-3xl filter"
    style="background-color: var(--color-primary-light)"
  >
  </div>

  <div class="relative z-10 container">
    <div
      class="cta-content bg-white/5 p-12 text-center backdrop-blur-lg"
      style="border-radius: var(--radius-2xl); box-shadow: var(--shadow-xl); border: 1px solid rgb(255 255 255 / 10%);"
    >
      <h2 class="mb-6 text-4xl font-bold text-white">{title}</h2>
      <p class="mx-auto mb-10 max-w-3xl text-xl text-white/80">{subtitle}</p>

      <div class="flex flex-col justify-center gap-4 sm:flex-row">
        <a
          href={ctaLink}
          class="btn-glow inline-flex h-12 items-center justify-center px-8 font-semibold text-white hover:translate-y-[-2px]"
          style="background-color: var(--color-accent); border-radius: var(--radius-lg); box-shadow: var(--shadow-md); transition: all var(--transition-normal);"
        >
          {ctaText}
        </a>
        <a
          href={secondaryLink}
          class="inline-flex h-12 items-center justify-center px-8 font-semibold text-white hover:bg-white/10"
          style="border-radius: var(--radius-lg); border: 1px solid rgb(255 255 255 / 30%); transition: all var(--transition-normal);"
        >
          {secondaryText}
        </a>
      </div>

      <!-- Trust badges -->
      <div class="mt-12 flex flex-col items-center">
        <p class="mb-4 text-sm text-white/70">{trustedBy}</p>
        <div class="flex flex-wrap justify-center gap-x-8 gap-y-4">
          {
            imageAssets.logos.trustedBadges.slice(0, 3).map((badge) => (
              <div class="h-8 w-auto opacity-50 brightness-0 invert transition-opacity hover:opacity-100">
                <svg
                  class="h-full"
                  viewBox="0 0 168 40"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d={badge.svgPath}
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                  {badge.id === "badge3" && (
                    <circle cx="59" cy="20" r="3" fill="currentColor" />
                  )}
                </svg>
              </div>
            ))
          }
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  /* Gradient background with grid pattern */
  .bg-grid {
    background-size: 40px 40px;
    background-image:
      linear-gradient(to right, rgb(255 255 255 / 10%) 1px, transparent 1px),
      linear-gradient(to bottom, rgb(255 255 255 / 10%) 1px, transparent 1px);
  }

  /* Button glow effect */
  .btn-glow {
    position: relative;
  }

  .btn-glow::before {
    content: "";
    position: absolute;
    inset: 0;
    border-radius: var(--radius-lg);
    box-shadow: 0 0 25px 5px rgb(255 255 255 / 40%);
    opacity: 0;
    transition: opacity var(--transition-normal) ease;
  }

  .btn-glow:hover::before {
    opacity: 1;
  }

  /* BLOB Animations */
  @keyframes animate-blob {
    0% {
      transform: translate(0, 0) scale(1);
    }

    33% {
      transform: translate(30px, -50px) scale(1.1);
    }

    66% {
      transform: translate(-20px, 20px) scale(0.9);
    }

    100% {
      transform: translate(0, 0) scale(1);
    }
  }

  .animate-blob {
    animation: animate-blob 7s ease-in-out infinite;
  }

  .animation-delay-2000 {
    animation-delay: 2s;
  }

  /* Subtle floating animation for the CTA content */
  .cta-content {
    animation: gentle-float 6s ease-in-out infinite;
  }

  @keyframes gentle-float {
    0% {
      transform: translateY(0);
    }

    50% {
      transform: translateY(-10px);
    }

    100% {
      transform: translateY(0);
    }
  }
</style>
