---
interface Service {
  title: string;
  description: string;
  icon: string;
}

interface Props {
  sectionTitle?: string;
  sectionSubtitle?: string;
  services?: Service[];
}

const {
  sectionTitle = "Powerful Features for Your Business",
  sectionSubtitle = "Our platform offers all the tools you need to streamline operations and drive growth.",
  services = [
    {
      title: "AI-Powered Analytics",
      description: "Gain actionable insights with our advanced analytics powered by artificial intelligence and machine learning algorithms.",
      icon: "chart"
    },
    {
      title: "Seamless Integration",
      description: "Connect with your favorite tools and services through our extensive API and pre-built integrations.",
      icon: "integration"
    },
    {
      title: "Real-Time Collaboration",
      description: "Work together with your team in real-time with collaborative workspaces and shared documents.",
      icon: "collaboration"
    },
    {
      title: "Automated Workflows",
      description: "Save time and reduce errors by automating repetitive tasks and complex business processes.",
      icon: "automation"
    },
    {
      title: "Enterprise Security",
      description: "Rest easy knowing your data is protected with enterprise-grade security and compliance features.",
      icon: "security"
    },
    {
      title: "24/7 Premium Support",
      description: "Get help whenever you need it with our round-the-clock customer support and extensive documentation.",
      icon: "support"
    }
  ]
} = Astro.props;
---

<section class="py-24 px-8 bg-white">
  <div class="max-w-7xl mx-auto">
    <!-- Section header -->
    <div class="text-center mb-20 feature-header">
      <h2 class="text-3xl md:text-4xl font-bold text-gray-900 mb-4">{sectionTitle}</h2>
      <p class="max-w-2xl mx-auto text-lg text-gray-600">{sectionSubtitle}</p>
    </div>
    
    <!-- Services grid -->
    <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
      {services.map((service, index) => (
        <div class="service-card p-8 rounded-xl bg-white border border-gray-100 shadow-sm hover:shadow-md transition-all duration-300" data-index={index}>
          <div class="icon-container mb-5 inline-flex items-center justify-center w-12 h-12 rounded-lg bg-indigo-100 text-indigo-600">
            {service.icon === "chart" && (
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
              </svg>
            )}
            {service.icon === "integration" && (
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 4a2 2 0 114 0v1a1 1 0 001 1h3a1 1 0 011 1v3a1 1 0 01-1 1h-1a2 2 0 100 4h1a1 1 0 011 1v3a1 1 0 01-1 1h-3a1 1 0 01-1-1v-1a2 2 0 10-4 0v1a1 1 0 01-1 1H7a1 1 0 01-1-1v-3a1 1 0 00-1-1H4a2 2 0 110-4h1a1 1 0 001-1V7a1 1 0 011-1h3a1 1 0 001-1V4z" />
              </svg>
            )}
            {service.icon === "collaboration" && (
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
              </svg>
            )}
            {service.icon === "automation" && (
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
              </svg>
            )}
            {service.icon === "security" && (
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
              </svg>
            )}
            {service.icon === "support" && (
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 5.636l-3.536 3.536m0 5.656l3.536 3.536M9.172 9.172L5.636 5.636m3.536 9.192l-3.536 3.536M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-5 0a4 4 0 11-8 0 4 4 0 018 0z" />
              </svg>
            )}
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-3">{service.title}</h3>
          <p class="text-gray-600">{service.description}</p>
        </div>
      ))}
    </div>
  </div>
</section>

<style>
  /* Animation for section header */
  .feature-header {
    opacity: 0;
    animation: fadeInUp 0.8s ease-out forwards;
    animation-play-state: paused;
  }
  
  /* Animation for service cards */
  .service-card {
    opacity: 0;
    transform: translateY(20px);
    animation: fadeInUp 0.5s ease-out forwards;
    animation-play-state: paused;
  }
  
  /* Stagger the animations based on index */
  .service-card[data-index="0"] { animation-delay: 0.1s; }
  .service-card[data-index="1"] { animation-delay: 0.2s; }
  .service-card[data-index="2"] { animation-delay: 0.3s; }
  .service-card[data-index="3"] { animation-delay: 0.4s; }
  .service-card[data-index="4"] { animation-delay: 0.5s; }
  .service-card[data-index="5"] { animation-delay: 0.6s; }
  
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Icon hover animation */
  .icon-container {
    transition: transform 0.3s ease;
  }
  
  .service-card:hover .icon-container {
    transform: scale(1.1);
  }
</style>

<script>
  // Intersection Observer to trigger animations when elements enter viewport
  document.addEventListener('DOMContentLoaded', () => {
    const animatedElements = document.querySelectorAll('.feature-header, .service-card');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          (entry.target as HTMLElement).style.animationPlayState = 'running';
          // Unobserve after triggering animation
          observer.unobserve(entry.target);
        }
      });
    }, {
      threshold: 0.1
    });
    
    animatedElements.forEach(element => {
      observer.observe(element);
    });
  });
</script>